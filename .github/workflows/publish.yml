name: Publish

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build_windows:
    name: Build release (Windows)
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --release --verbose
      - name: Archive EXE and PDB
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-release
          path: |
            target/release/bichrome.exe
            target/release/bichrome.pdb

  build_macos:
    name: Build release (macOS)
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --release --verbose
      - name: Prepare app bundle
        run: |
          mkdir -p dist
          cp -va assets/bichrome.app dist/bichrome.app
          cp -va target/release/bichrome dist/bichrome.app/Contents/MacOS/bichrome
          ditto -ckv --keepParent dist/bichrome.app dist/bichrome.zip
      - name: Archive bundle ZIP
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-release
          path: dist/bichrome.zip

  create_release:
    name: Publish release
    needs: [ build_windows, build_macos ]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-changelog
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist
      - name: Generate changelog
        run: |
          cargo install --version 0.3.1 git-changelog
          PREVIOUS_TAG=$(git for-each-ref --count=1 --sort=-taggerdate '--format=%(refname:short)' 'refs/tags/*' '--no-contains=${{ github.ref }}')
          git changelog -d ${PREVIOUS_TAG}..${{ github.ref }} >dist/CHANGELOG.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: dist/CHANGELOG.md
          draft: false
          prerelease: false
      - name: Upload Release Asset (Windows EXE)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/Windows-release/bichrome.exe
          asset_name: bichrome-win64.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Windows PDB)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/Windows-release/bichrome.pdb
          asset_name: bichrome-win64.pdb
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/macOS-release/bichrome.zip
          asset_name: bichrome-macos.zip
          asset_content_type: application/zip
